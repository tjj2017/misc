-- Generic packages are not supported by SPARK 2005.
--  This file is a shadow to represent the generic
--  package SPARK_Classic.Bounded_Stacks instantiated with
--  SPARK_Classic.Node_Id.Tree_Node and Stack_Size 32.
with SPARK_Classic.Node_Id_Trees;
--# inherit SPARK_Classic.Node_Id_Trees;
package SPARK_Classic.Tree_Node_Stacks is
--  Ideally, Node_Id_Trees.Tree_Node would be renamed Element_Type by the
--  following subtype declaration so as to be consistent with the generic
--  type naming. Unfortunately, this subtype declaration crashes the
--  SPARK 2005 Examiner during VC generation.  The easiest way to obviate
--  the problem is to replacing every instance of Element_Type with
--  Node_Id_Trees.Tree_Node.  This means that a shadow body is required
--  with the same replacement rather than using the generic body directly.
--  subtype Element_Type is Node_Id_Trees.Tree_Node;
      
   Stack_Size : constant Positive := 32;
   
   type Stack is tagged private;

   subtype Stack_Count is Natural range 0 .. Stack_Size;

   function Count    (S : Stack) return Stack_Count;
   function Is_Empty (S : Stack) return Boolean;
--     with Post => Is_Empty'Result = (Count (S) = 0);
   --# return Count (S) = 0;

   procedure New_Stack (S : out Stack);
--     with Post => Is_Empty (S);
   --# post Is_Empty (S);

   procedure Push (S : in out Stack;
                   Value : Node_Id_Trees.Tree_Node);
--     with Pre => Count (S) < Stack_Size,
--          Post => Count (S) = Count (S'Old) + 1;
   --# pre  Count (S) < Stack_Size;
   --# post Count (S) = Count (S~) + 1;

   procedure Pop  (S : in out Stack;
                   Value : out Node_Id_Trees.Tree_Node);
--     with Pre  => not Is_Empty (S),
--     Post => Count (S) = Count (S'Old) - 1;
   --# pre not Is_Empty (S);
   --# post Count (S) = Count (S~) - 1;

   function Top (S : Stack) return Node_Id_Trees.Tree_Node;
 --    with Pre => not Is_Empty (S);
   --# pre  not Is_Empty (S);

   function Predecessor (S : Stack;
                         Pred_Num : Stack_Count)
                         return Node_Id_Trees.Tree_Node;
--     with Pre => Pred_Num < Count (S);
   --# pre Pred_Num < Count (S);

   procedure Clear (S : out Stack);
--     with Post => Is_Empty (S);
   --# post Is_Empty (S);
private
   subtype Stack_Index is Stack_Count range 1 .. Stack_Count'Last;
   type Stack_Contents is array (Stack_Index) of Node_Id_Trees.Tree_Node;

   type Stack is tagged
      record
         Count    : Stack_Count;
         Contents : Stack_Contents;
      end record;

end SPARK_Classic.Tree_Node_Stacks;
