with SPARK_Classic.Expose_Nodes,
     SPARK_Classic.Trees,
     SPARK_Classic.Bounded_Stacks;
use type SPARK_Classic.Expose_Nodes.Tree_Node,
         SPARK_Classic.Expose_Nodes.Key_Type;
--# inherit SPARK_Classic.Expose_Nodes,
--#         SPARK_Classic.Trees,
--#         SPARK_Classic.Bounded_Stacks;
package SPARK_Classic.Atrees is
   subtype Key_Type is Expose_Nodes.Key_Type;
   subtype Value_Type is Expose_Nodes.Value_Type;
   subtype Tree_Node is Expose_Nodes.Tree_Node;
   Null_Value : constant Value_Type := Expose_Nodes.Null_Value;

   type A_Tree is tagged private;
--   Null_A_Tree : constant A_Tree;
   
   subtype Element_Type is Bounded_Stacks.Element_Type;
   
   --# function Persists (AT_Pre, AT_Post : A_Tree) return Boolean;
   
   function Empty_Tree (ATree : A_Tree) return Boolean;

   function Populated (ATree : A_Tree) return Boolean;

   procedure New_A_Tree (ATree : out A_Tree; Tree_Container : Trees.Tree_Type);
   --# post Empty_Tree (ATree);

   function Count (ATree : A_Tree) return Natural;
   
   function Is_Present (ATree : A_Tree; Key : Key_Type) return Boolean;
   --# pre Populated (ATree);
 
   procedure Insert (ATree       : in out A_Tree;
                     Key        : Key_Type;
                     Inserted   : out Boolean);
   --# post Is_Present (ATree, Key) and Populated (ATree) and
   --#      (Inserted -> (((not Populated (ATree~)) -> Count (ATree) = 1) and
   --#                    ((Populated (ATree~)) -> 
   --#                        Count (ATree) = Count (ATree~) + 1)));

   procedure Insert_With_Value (ATree         : in out A_Tree;
                                Key           : Key_Type;
                                Value         : Value_Type;
                                Inserted      : out Boolean;
                                Value_At_Node : out Value_Type);
   --# post Is_Present (ATree, Key) and Populated (ATree) and
   --#      (Inserted -> (((not Populated (ATree~)) -> Count (ATree) = 1) and
   --#                    ((Populated (ATree~)) -> 
   --#                        Count (ATree) = Count (ATree~) + 1)));

   procedure Clear_A_Tree (ATree : in out A_Tree);
   --# pre not Empty_Tree (ATree);
   --# post Empty_Tree (ATree);

   function Is_Equal (ATree_1, ATree_2 : A_Tree) return Boolean;
   --# pre Populated (ATree_1) and Populated (ATree_2);
   --# return E => E -> ATree_1 = ATree_2;

   function Tree_Depth (ATree : A_Tree) return Natural;
   --# pre Populated (ATree);

   type Enumerator is private;

   function New_Enumerator (ATree : A_Tree) return Enumerator;
   --# pre Populated (ATree);

   procedure Next_Node (E : in out Enumerator; Node : out Tree_Node);

private
   type Enumerator is
      record
         ATree   : A_Tree;
         --  A stack to record visited nodes when enumerating.
         Visited : Bounded_Stacks.Stack; 
      end record;
         

   type A_Tree is tagged
      record
         Container : Trees.Tree_Type;
         Root      : Tree_Node;
         Count     : Natural;
      end record;

--   Null_A_Tree : constant A_Tree := A_Tree'
--     (Root  => Trees.Empty_Node,
--      Count => 0);


   type Direction is (Left, Right);

end SPARK_Classic.Atrees;
